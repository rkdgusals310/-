import heapq
import sys

def dijkstra(start):
    distances = {node: sys.maxsize for node in graph}
    distances[start] = 0
    queue = []
    heapq.heappush(queue, (distances[start], start))

    while queue:
        current_distance, node = heapq.heappop(queue)
        if distances[node] < current_distance:
            continue

        for adjacency_node, distance in graph[node].items():
            weighted_distance = current_distance + distance
            if weighted_distance < distances[adjacency_node]:
                distances[adjacency_node] = weighted_distance
                heapq.heappush(queue, (weighted_distance, adjacency_node))

    return distances
#testcase1
graph={
    'A': {'B': 6, 'C': 2},
    'B': {'D': 1},
    'C': {'B': 3, 'D': 5},
    'D': {}
}
#testcase2
"""graph = {
    'A': {'B': 10, 'C': 3},
    'B': {'C': 1, 'D': 2},
    'C': {'B': 4, 'D': 8, 'E': 2},
    'D': {'E': 7},
    'E': {'D': 9},
}
"""
#testcase1
"""
graph={
    'A': {'B': 1, 'C': 6},
    'B': {'D': 2},
    'C': {},
    'D': {'C': 2}

}
"""

result = dijkstra('A')

print(result)


# {'A': 0, 'B': 7, 'C': 3, 'D': 9, 'E': 5}
